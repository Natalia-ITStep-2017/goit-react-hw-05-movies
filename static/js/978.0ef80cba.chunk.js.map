{"version":3,"file":"static/js/978.0ef80cba.chunk.js","mappings":"+PAGaA,EAAe,mCAAG,WAAOC,GAAP,uFAENC,EAAAA,EAAAA,IAAA,6CAAgDD,EAAhD,YAAmE,CACxFE,QAAS,CAAE,cAAiB,gOAHD,cAEvBC,EAFuB,yBAKtBA,EAASC,MALa,2CAAH,sD,yBCY5BC,IAAAA,UAAsB,CACpBC,QAASD,IAAAA,MAAgB,CACvBE,OAAQF,IAAAA,OAAAA,WACRG,QAASH,IAAAA,OAAAA,WACTI,GAAIJ,IAAAA,OAAAA,aACHK,YAGL,MArBoB,SAAC,GAAiB,IAAfJ,EAAc,EAAdA,QACrB,OACE,wBACGA,EAAQK,KAAI,YAA8B,IAA3BJ,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GAC/B,OAAQ,2BACN,oCAAYF,MACZ,uBAAIC,MAFWC,EAIlB,KAGN,EC0BD,EAjCgB,WAEd,IAAQT,GAAYY,EAAAA,EAAAA,MAAZZ,QAER,GAA8Ba,EAAAA,EAAAA,UAAS,MAAvC,eAAOP,EAAP,KAAgBQ,EAAhB,KACA,GAAkDD,EAAAA,EAAAA,WAAS,GAA3D,eAAOE,EAAP,KAA0BC,EAA1B,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WAER,IAAKF,EAAmB,CAAC,IACRG,EADO,mCACtB,WAAoCC,GAApC,gGAE2BpB,EAAgBoB,GAF3C,OAEUhB,EAFV,OAGIW,GAAW,OAAIX,EAASiB,UACxBJ,GAAqB,GAJzB,gDAMIK,QAAQC,IAAR,MANJ,yDADsB,sDAUtBJ,EAAqBlB,EACtB,CACF,GAAE,CAACM,EAASS,EAAmBf,KAI9B,gCACGM,IAAW,SAAE,EAAF,CAAcA,QAASA,IAClCA,GAA8B,IAAnBA,EAAQiB,SAClB,mDAGP,C","sources":["api/getMovieReviews.js","components/reviews/reviewsList.js","components/reviews/reviews.js"],"sourcesContent":["import axios from \"axios\";\n\n\nexport const getMovieReviews = async (movieId) => {\n\n  const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews`, {\n    headers: { 'Authorization': \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyZDk4NjcxMTNlZTg0MDg0Y2ZjNjU2ODVmMzIwNmMwYyIsInN1YiI6IjY0N2Y4MzY2Mzg1MjAyMDBhZjE0ZTgyZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.VNCNKNuK7_TGGjg30gNSY2nOQUtJtqUaOBiIeuk9KhE\" },\n  });\n  return response.data\n}\n","import PropTypes from \"prop-types\";\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    < ul >\n      {reviews.map(({ author, content, id }) => {\n        return (<li key={id}>\n          <p>Author: {author}</p>\n          <p>{content}</p>\n        </li>)\n      })}\n    </ul >\n  );\n};\n\nPropTypes.propTypes = {\n  reviews: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired\n};\n\nexport default ReviewsList","import { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { getMovieReviews } from \"api/getMovieReviews\"\nimport ReviewsList from \"./reviewsList\";\n\n\nconst Reviews = () => {\n\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState(null);\n  const [isReviewsRendered, setIsReviewsRendered] = useState(false);\n\n  useEffect(() => {\n\n    if (!isReviewsRendered) {\n      async function fetchGetMovieReviews(Id) {\n        try {\n          const response = await getMovieReviews(Id);\n          setReviews([...response.results]);\n          setIsReviewsRendered(true)\n        } catch (error) {\n          console.log(error);\n        }\n      }\n      fetchGetMovieReviews(movieId);\n    }\n  }, [reviews, isReviewsRendered, movieId]);\n\n\n  return (\n    <>\n      {reviews && < ReviewsList reviews={reviews} />}\n      {reviews && reviews.length === 0 &&\n        <h3>There are no reviews</h3>}\n    </>\n  )\n};\n\nexport default Reviews;"],"names":["getMovieReviews","movieId","axios","headers","response","data","PropTypes","reviews","author","content","id","isRequired","map","useParams","useState","setReviews","isReviewsRendered","setIsReviewsRendered","useEffect","fetchGetMovieReviews","Id","results","console","log","length"],"sourceRoot":""}