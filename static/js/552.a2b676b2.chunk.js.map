{"version":3,"file":"static/js/552.a2b676b2.chunk.js","mappings":"6LAoBAA,IAAAA,UAAsB,CACpBC,OAAQD,IAAAA,QAAkBA,IAAAA,MAAgB,CACxCE,MAAOF,IAAAA,OAAAA,WACPG,GAAIH,IAAAA,OAAAA,aACHI,YACDA,YAGJ,IAxBmB,SAAC,GAAgB,IAAdH,EAAa,EAAbA,OACdI,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGL,EAAOM,KAAI,SAACC,GAAD,OACV,eAAIC,UAAWC,EAAAA,EAAAA,UAAf,UAEE,SAAC,KAAD,CAAMC,GAAE,kBAAaH,EAAML,IAAMS,MAAO,CAAEC,KAAMR,GAAhD,SACGG,EAAMN,SAFJM,EAAML,GAFH,KAUjB,C,uJC2BD,EAvCkB,SAAC,GAAkB,IAAD,EAAfW,EAAe,EAAfA,SAEnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAC3C,GAAoCC,EAAAA,EAAAA,UAASF,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KAaA,OACE,kBAAMb,UAAWC,EAAAA,EAAAA,WACfI,SARsB,SAACS,GACzBA,EAAMC,iBACNP,EAAgB,CAAEC,MAAOG,IACzBP,GACD,EAGC,WAEE,kBACEL,UAAWC,EAAAA,EAAAA,gBACXe,KAAK,OACLC,aAAa,MACbC,YAAY,eACZC,MAAOP,EACPQ,SAnBe,SAACN,GACpBD,EAAcC,EAAMO,cAAcF,MACnC,KAmBG,mBAAQH,KAAK,SAAShB,UAAWC,EAAAA,EAAAA,iBAAjC,sBAKL,E,kBCrCYqB,EAAY,mCAAG,WAAOV,GAAP,gFACpBW,EAAU,CACdC,KAAM,EACNf,MAAOG,GAHiB,SAMHa,EAAAA,EAAAA,IAAA,4CAAuD,CAC5EC,OAAQH,EACRI,QAAS,CAAE,cAAiB,gOARJ,cAMpBC,EANoB,yBAUnBA,EAASC,MAVU,2CAAH,sDC6CzB,EAvCe,WAEb,OAAuBvB,EAAAA,EAAAA,MACjBG,GADN,eAC2BC,IAAI,SAE/B,GAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOnB,EAAP,KAAesC,EAAf,KACA,GAAgDnB,EAAAA,EAAAA,WAAS,GAAzD,eAAOoB,EAAP,KAAyBC,EAAzB,KAwBA,OAlBAC,EAAAA,EAAAA,YAAU,WAER,GAAIxB,IACGsB,EAAkB,CAAC,IACPG,EADM,mCACrB,WAAiCtB,GAAjC,gGAE2BU,EAAaV,GAFxC,OAEUgB,EAFV,OAGIE,GAAU,OAAIF,EAASO,UACvBH,GAAoB,GAJxB,gDAMII,QAAQC,IAAR,MANJ,yDADqB,sDAUrBH,EAAkBzB,EACnB,CAEJ,GAAE,CAACjB,EAAQuC,EAAkBtB,KAG5B,iBAAKT,UAAU,YAAf,WACE,SAAC,EAAD,CAAWK,SAxBE,WACf2B,GAAoB,EACrB,IAuBIvB,GAASjB,IAAU,SAAC,IAAD,CAAYA,OAAQA,EAAQU,GAAG,aAClDO,GAASjB,GAA4B,IAAlBA,EAAO8C,SAAgB,mEAGhD,C,oBC5CD,KAAgB,WAAa,0BAA0B,iBAAmB,gCAAgC,gBAAkB,+BAA+B,mBAAmB,gCAAgC,UAAY,yB","sources":["components/movies/moviesList.js","components/movies/searchbar.js","api/searchMovie.js","pages/movies.js","webpack://react-homework-template/./src/components/movies/movie.module.css?0de0"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\nimport css from './movie.module.css';\nimport PropTypes from \"prop-types\";\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map((movie) => (\n        <li className={css.movieItem}\n          key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }} >\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nPropTypes.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired\n  }).isRequired\n  ).isRequired\n};\n\nexport default MoviesList","import { useState } from 'react';\nimport { useSearchParams } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport css from './movie.module.css';\n\n\nconst Searchbar = ({ onSubmit }) => {\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get(\"query\") ?? \"\";\n  const [searchText, setSearchText] = useState(query)\n\n\n  const handleChange = (event) => {\n    setSearchText(event.currentTarget.value)\n  }\n\n  const handleSearchMovie = (event) => {\n    event.preventDefault();\n    setSearchParams({ query: searchText });\n    onSubmit();\n  }\n\n  return (\n    <form className={css.SearchForm}\n      onSubmit={handleSearchMovie}>\n      <input\n        className={css.SearchFormInput}\n        type=\"text\"\n        autoComplete=\"off\"\n        placeholder=\"Search movie\"\n        value={searchText}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className={css.SearchFormButton}>\n        Search\n      </button>\n    </form>\n  )\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar\n","import axios from \"axios\";\n\nexport const searchMovies = async (searchText) => {\n  const options = {\n    page: 1,\n    query: searchText\n  }\n\n  const response = await axios.get(`https://api.themoviedb.org/3/search/movie`, {\n    params: options,\n    headers: { 'Authorization': \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyZDk4NjcxMTNlZTg0MDg0Y2ZjNjU2ODVmMzIwNmMwYyIsInN1YiI6IjY0N2Y4MzY2Mzg1MjAyMDBhZjE0ZTgyZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.VNCNKNuK7_TGGjg30gNSY2nOQUtJtqUaOBiIeuk9KhE\" },\n  });\n  return response.data\n}\n","\nimport { useState, useEffect } from \"react\"\nimport Searchbar from \"../components/movies/searchbar\"\nimport MoviesList from \"../components/movies/moviesList\"\nimport { searchMovies } from \"api/searchMovie\"\nimport { useSearchParams } from \"react-router-dom\";\n\n\nconst Moveis = () => {\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get(\"query\");\n\n  const [movies, setMovies] = useState(null);\n  const [isMoviesRendered, setIsMoviesRendered] = useState(false);\n\n  const onSubmit = () => {\n    setIsMoviesRendered(false);\n  }\n\n  useEffect(() => {\n\n    if (query) {\n      if (!isMoviesRendered) {\n        async function fetchSearchMovies(searchText) {\n          try {\n            const response = await searchMovies(searchText);\n            setMovies([...response.results]);\n            setIsMoviesRendered(true)\n          } catch (error) {\n            console.log(error);\n          }\n        }\n        fetchSearchMovies(query);\n      }\n    }\n  }, [movies, isMoviesRendered, query]);\n\n  return (\n    <div className=\"{css.App}\">\n      <Searchbar onSubmit={onSubmit} />\n      {query && movies && <MoviesList movies={movies} to=\"/movies/\" />}\n      {query && movies && movies.length === 0 && <h3>There is no results for your search </h3>}\n    </div>\n  )\n};\n\nexport default Moveis\n\n","// extracted by mini-css-extract-plugin\nexport default {\"SearchForm\":\"movie_SearchForm__AeF-B\",\"SearchFormButton\":\"movie_SearchFormButton__4Roxr\",\"SearchFormInput\":\"movie_SearchFormInput__iy5EN\",\"SearchForm-input\":\"movie_SearchForm-input__4gU7n\",\"movieItem\":\"movie_movieItem__RVKXf\"};"],"names":["PropTypes","movies","title","id","isRequired","location","useLocation","map","movie","className","css","to","state","from","onSubmit","useSearchParams","searchParams","setSearchParams","query","get","useState","searchText","setSearchText","event","preventDefault","type","autoComplete","placeholder","value","onChange","currentTarget","searchMovies","options","page","axios","params","headers","response","data","setMovies","isMoviesRendered","setIsMoviesRendered","useEffect","fetchSearchMovies","results","console","log","length"],"sourceRoot":""}